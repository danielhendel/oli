name: Health Probes

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *" # daily at 09:00 UTC
  workflow_run:
    workflows: ["Deploy Cloud Run"]
    types: [completed]

jobs:
  probe:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      id-token: write
    env:
      SERVICE_URL: https://healthos-api-zervimbdzq-uc.a.run.app
      SA_EMAIL: oli-ci-invoker@oli-backend.iam.gserviceaccount.com

    steps:
      - uses: actions/checkout@v4

      # 1) Public probe first (no auth)
      - name: Public probe (no auth)
        id: public
        continue-on-error: true
        run: |
          set -euo pipefail
          which jq >/dev/null 2>&1 || (echo "jq missing" && exit 1)

          ok=1
          for p in "/" "/api/healthz"; do
            url="${SERVICE_URL%/}${p}"
            echo "Probing (public) ${url} ..."
            code=$(curl -sS -o /tmp/resp.json -w "%{http_code}" -H "Accept: application/json" "$url")
            echo "HTTP ${code}"
            cat /tmp/resp.json || true
            if [ "$code" != "200" ]; then ok=0; break; fi
            jq -e '.ok == true and .service == "api"' /tmp/resp.json >/dev/null || ok=0
            [ $ok -eq 1 ] || break
          done

          if [ $ok -eq 1 ]; then
            echo "public_ok=true" >> "$GITHUB_OUTPUT"
            exit 0
          else
            echo "public_ok=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      # 2) Fallback to OIDC if public probe failed
      - id: auth
        name: Auth with GCP via WIF (fallback)
        if: steps.public.outcome == 'failure'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/391788417686/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: ${{ env.SA_EMAIL }}
          create_credentials_file: true
          export_environment_variables: true

      - name: OIDC probe (fallback)
        if: steps.public.outcome == 'failure'
        run: |
          set -euo pipefail
          which jq >/dev/null 2>&1 || (echo "jq missing" && exit 1)

          echo "Minting ID token for audience: ${SERVICE_URL}"
          TOKEN="$(gcloud auth print-identity-token \
            --impersonate-service-account="${SA_EMAIL}" \
            --audiences="${SERVICE_URL}")"

          ok=1
          for p in "/" "/api/healthz"; do
            url="${SERVICE_URL%/}${p}"
            echo "Probing (OIDC) ${url} ..."
            code=$(curl -sS -o /tmp/resp.json -w "%{http_code}" \
              -H "Authorization: Bearer ${TOKEN}" \
              -H "Accept: application/json" \
              "$url")
            echo "HTTP ${code}"
            cat /tmp/resp.json || true
            if [ "$code" != "200" ]; then ok=0; break; fi
            jq -e '.ok == true and .service == "api"' /tmp/resp.json >/dev/null || ok=0
            [ $ok -eq 1 ] || break
          done

          [ $ok -eq 1 ]
