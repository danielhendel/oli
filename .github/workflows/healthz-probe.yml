name: Healthz Probe (OIDC)
on:
  workflow_dispatch: {}
  workflow_run:
    workflows: ["Cloud Run Deploy"]
    types: [completed]

jobs:
  probe:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # required for WIF
    env:
      SERVICE_URL: https://healthos-api-zervimbdzq-uc.a.run.app
      SA_EMAIL: oli-ci-invoker@oli-backend.iam.gserviceaccount.com
    steps:
      - uses: actions/checkout@v4

      # 1) Auth to GCP via WIF, obtain an ACCESS TOKEN for the SA
      - id: auth
        name: Auth with GCP via WIF (access token)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/391788417686/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: ${{ env.SA_EMAIL }}
          create_credentials_file: true
          export_environment_variables: true
          # NOTE: default token_format is "access_token" (what we want)

      # 2) Mint an ID token for the Cloud Run audience via IAMCredentials API
      - name: Generate ID token for Cloud Run
        id: mint
        run: |
          set -euo pipefail
          ACCESS_TOKEN="${{ steps.auth.outputs.access_token }}"
          # Use IAMCredentials API to generate an ID token with our SERVICE_URL as audience
          resp="$(curl -sS -X POST \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${SA_EMAIL}:generateIdToken" \
            -d "{\"audience\":\"${SERVICE_URL}\",\"includeEmail\":false}")"
          echo "$resp" | jq -e -r .token > /dev/null
          ID_TOKEN="$(echo "$resp" | jq -r .token)"
          echo "::add-mask::$ID_TOKEN"
          echo "id_token=$ID_TOKEN" >> "$GITHUB_OUTPUT"

      # 3) Probe /healthz with the minted ID token
      - name: Run OIDC health probe (direct)
        run: |
          set -euo pipefail
          echo "Probing ${SERVICE_URL}/healthz with minted ID token..."
          code="$(curl -sS --connect-timeout 5 --max-time 10 -o /dev/null -w '%{http_code}' \
            -H "Authorization: Bearer ${{ steps.mint.outputs.id_token }}" \
            -H "Accept: application/json" \
            "${SERVICE_URL}/healthz")"
          echo "HTTP ${code}"
          test "${code}" = "200"
          echo "Health probe OK"
